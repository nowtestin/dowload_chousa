<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $timeout, $location, spScUtil, nowAttachmentHandler, spUtil, $log, spAriaUtil, $q, spAtf, spModal, spAriaFocusManager, cabrillo, snAnalytics) {
  var c = this;
	c.showSpecialInstructions = false;
	c.showDeliveryAddr = false;
	c.isNative = cabrillo.isNative() && c.data.isMEE;
	
	c.KEYS = {
		ESC : 27
	};

	c.onKeyDown = function(e) {
		if (e.keyCode == c.KEYS.ESC) {
		//There is a tooltip on this modal, which if opened should be closed first
		var ttElem = $('.tooltip.in');
      		if(!ttElem.length) 
			c.cancel();
		}
	};
	
	if (c.data.ignoreTableACL)
		c.requestedFor = {
			ed: {
				reference: 'sys_user',
				searchField: c.data.reqForSearchCols,
				qualifier: c.data.reqForQuery
			},
			attributes: {
				ref_ac_columns: c.data.reqForDispCols,
				ref_auto_completer: "AJAXTableCompleter",
				ref_ac_columns_search: c.data.refAcSearch
			},
			displayValue: c.data.cart.requested_for_display_name,
			value: c.data.cart.requested_for,
			name: 'requested_for',
			isMandatory: function(){ return true;},
			g_form:{
				$private:{
					events:{
						on: function(){}
					}
				},
				setValue: function(name, value, displayValues) {
					if (c.requestedFor.value != value) {
						c.requestedFor.value = value;
						$scope.$emit("field.change", {field : {'name' : 'requested_for'}, newValue : value});
					}
				}
			}
		};

	
	c.updateDetails = function() {
		c.deliverTo = c.data.cart.delivery_address;
		c.special_instructions = c.data.cart.special_instructions;
		if (!c.data.ignoreTableACL) {
			c.requestedFor = {
				displayValue: c.data.cart.requested_for_display_name,
				value: c.data.cart.requested_for,
				name: 'requested_for'
			}
		} else
			c.requestedFor.value = c.data.cart.requested_for;
	}
	
	
	spAtf.init().then(function(atf) {
		$scope._atf = atf;
		atf.expose('checkout_util', checkoutUtil);
	});
	
	var checkoutUtil = {
		checkout: function() {
			var defer = $q.defer();
			$scope.c.triggerCheckout();
			var cleanUp;
			var isOrderGuide = c.data.action == 'order_guide';
			if(isOrderGuide)
				cleanUp = $scope.$on('$sp.sc_order_guide.submitted', function(o, result) {
					$timeout(function() {
						cleanUp();
						defer.resolve(result);
					}, 10);
				});
			else
				cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
					$timeout(function() {
						cleanUp();
						defer.resolve(result);
					}, 10);
				});
			return defer.promise;
		}
	}
	
	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});

	$scope.m = $scope.data.msgs;
	$scope.checkOutMsg = $scope.m.checkOutMsg;
	$scope.checkoutPopupTitle = $scope.m.checkoutPopupTitle;
	
	displayNativeButtons();
	
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(function (attachments, action) {
		$scope.attachments = attachments;
		if (action === "added")
			$scope.setFocusToAttachment();
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted")
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
		spUtil.get($scope, {action: "from_attachment"});
	}, function (error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	});
	
	ah.setParams('sc_cart', c.data.cart.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
	
	$scope.attachmentHandler.getAttachmentList();

	$scope.confirmDeleteAttachment = function(attachment) {
		if (c.isNative) {
			if (confirm($scope.data.msgs.delete_attachment)) {
				$scope.attachmentHandler.deleteAttachment(attachment);
				$scope.setFocusToAttachmentButton();
			}			
		} else {
			spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
				$scope.attachmentHandler.deleteAttachment(attachment);
				$scope.setFocusToAttachmentButton();
			});
		}
	}

	c.changeShippingInfo = function() {
		if (c.data.action !== 'order_now')
			c.server.get({
						action: "change_shipping_info",
						requestedFor: c.requestedFor.value,
						special_instructions: c.special_instructions,
						deliverTo: c.deliverTo,
						cart: {name: c.data.cart.name}
					}).then(function(response) {
						c.data.cart = response.data.cart;
						c.updateDetails();
					});
	}
	
	c.triggerCheckout = function() {
		var newURL;
		c.checkoutInProgress = true;
		spAriaUtil.sendLiveMessage(c.data.msgs.checkingOutMsg, "status");

		putCheckingOutBtn();
		var webAnalyticsMsgSuffix = c.isNative ? " - NOW Mobile" : ""; 
		var additionalParms = {'sysparm_requested_for': c.requestedFor.value,
													 'special_instructions': c.special_instructions,
													 'delivery_address': c.deliverTo
													};
		if (c.data.parentParams) {
				additionalParms.sysparm_parent_sys_id =  c.data.parentParams.sysparm_parent_sys_id;
				additionalParms.sysparm_parent_table = c.data.parentParams.sysparm_parent_table;
				additionalParms.is_service_workspace = c.options.isServiceWorkspace;
		}
		additionalParms.engagement_channel = c.data.engagement_channel;
		additionalParms.referrer = c.data.referrer;
		if (c.data.action == 'order_now') {
			spScUtil.orderNow(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				$scope.server.get({
					action: 'log_request',
					itemDetails: {
						sys_id: $scope.data.item.sys_id,
						name: $scope.data.item.name,
						sys_class_name: $scope.data.item.sys_class_name
					}
				});
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				// build and send payload for instrumentation
				var payload= {};
				payload.name = "Submit Catalog Request";
				payload.data = {};
				payload.data["Catalog Title"] = c.data.item.title;
				payload.data["Catalog SysID"] = c.data.item.sys_id;
				payload.data["Shopping Cart"] = "false";
				snAnalytics.addEvent(payload);
				
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else if (!$scope._atf) {
					//redirect to standrd ticket page if universal request is created
					if(a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace)
						newURL = $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request);
					else {
						var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id;
						if ($scope.data.referrer)
							url = url + "&referrer=" + $scope.data.referrer;
						if (c.options.isServiceWorkspace && c.options.hide_actions)
							url = url + "&hide_actions=" + c.options.hide_actions;
						newURL = $location.search(url);
					}
					spAriaFocusManager.navigateToLink(newURL.url());
				}
			}, function(response) {
				c.cancel();
				if (response.data.result && response.data.result.errMsg)
					spUtil.addErrorMessage(response.data.result.errMsg);
			});
		} else if (c.data.action == 'order_now_wishlisted_item') {
			spScUtil.orderWishlistedItem(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				$scope.server.get({
					action: 'log_request',
					itemDetails: {
						sys_id: $scope.data.item.sys_id,
						name: $scope.data.item.name,
						sys_class_name: $scope.data.item.sys_class_name
					}
				});
				postOrderDraftOrWishlist(response, true);
			});
		}
		else if (c.data.action == 'order_now_draft_item') {
			spScUtil.orderDraftItem(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				$scope.server.get({
					action: 'log_request',
					itemDetails: {
						sys_id: $scope.data.item.sys_id,
						name: $scope.data.item.name,
						sys_class_name: $scope.data.item.sys_class_name
					}
				});
				postOrderDraftOrWishlist(response, false);
			});
		}
		else {
			c.data.delivery_address = c.deliverTo;
			c.data.special_instructions = c.special_instructions;
			c.data.requested_for = c.requestedFor.value;
			var isOrderGuide = c.data.action == 'order_guide';
			c.server.update().then(function(response) {
				if (!response.result)
					return;
				
				// build and send payload for instrumentation
				var cartData = c.data.cartData;
				var cartDataLen = c.data.cartData.length;
				for (var i = 0; i < cartDataLen; i++) {
					var payload= {};
					payload.name = "Submit Catalog Request";
					payload.data = {};
					payload.data["Catalog Title"] = cartData[i].title;
					payload.data["Catalog SysID"] = cartData[i].sys_id;
					payload.data["Catalog Cart SysID"] = cartData[i].cartID;
					payload.data["Shopping Cart"] = "true";
					snAnalytics.addEvent(payload);
				}
				
				c.data.action = null;
				if (isOrderGuide) {
					window.GlideWebAnalytics.trackEvent("Service Catalog", "Order Guide Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", $scope.data.item.items.length, 0);
					$scope.$emit("$sp.sc_order_guide.submitted", $scope.data.result);
				}
				else {
					window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Catalog Request Submitted", c.data.numberOfCartItems, 0);
					$scope.$emit("$sp.cart.submitted", $scope.data.result);
				}
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.update");
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				}
				else {
					if ($scope.data.result.sys_id) {
						if($scope.data.result.universal_request) 
							newURL = $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + $scope.data.result.universal_request);
						else {
							var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + $scope.data.result.sys_id;
							if ($scope.data.referrer)
								url = url + "&referrer=" + $scope.data.referrer;
							if (c.options.isServiceWorkspace && c.options.hide_actions)
								url = url + "&hide_actions=" + c.options.hide_actions;
							newURL = $location.search(url);
						}
					}
					else 
						newURL = $location.search('id=requests&is_new_order=true');
					
					removeCabrilloButtons();
					spAriaFocusManager.navigateToLink(newURL.url());

					$timeout(function(){
						$rootScope.$broadcast("$sp.service_catalog.cart.update", {checkedOut: true});
						$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);						
					})

				}
			});
		}
	}

	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'requested_for') {
			c.data.cart.requested_for = parms.newValue;
			var getShippingAddrURL = '/api/sn_sc/v1/servicecatalog/cart/delivery_address/' + parms.newValue;
			$http.get(getShippingAddrURL).then(function handleSuccess(response) {
				if (response.data.result) {
					c.deliverTo = response.data.result.trim();
				} else {
					c.deliverTo = '';
				}
				c.changeShippingInfo();
			});
		}
	});

	c.cancel = function() {
		if (c.isNative) {
			cabrillo.viewLayout.setTitle(c.oldTitle);
			removeCabrilloButtons();
		}
		$rootScope.$broadcast("$sp.service_catalog.cart.cancel_order", true);
	}

	c.allowDeliveryAddress = function () {
		if (c.data.item)
			return c.data.item.request_method != "request"
		return true;
	}

	var mespClosePopupUnregister = $rootScope.$on("mesp.popup.close", function() {
		// Timeout is to give a better user experience otherwise when this popup opens,
		// the cabrillo buttons will be displayed immediately giving a bad user experience.
		$timeout(function(){
			displayNativeButtons();
		});
	});
	
	var mespOpenPopupUnregister = $rootScope.$on("mesp.popup.open", function() {
		// Timeout is to give a better user experience otherwise when this popup opens,
		// the cabrillo buttons will be displayed immediately giving a bad user experience.
		$timeout(function(){
			removeCabrilloButtons();
		});
	});
	
	$scope.$on("$destroy", function() {
		mespClosePopupUnregister();
		mespOpenPopupUnregister();
	});
	
	function removeCabrilloButtons() {
		 if (c.isNative)
			 cabrillo.viewLayout.setBottomButtons();
	}
	
	function postOrderDraftOrWishlist(response, isWishlist) {
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				if (isWishlist) 
					$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
		
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else {
//redirect to standrd ticket page if universal request is created
					if(a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace)
						newURL = $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request);
					else {
						var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id;
						if ($scope.data.referrer)
							url = url + "&referrer=" + $scope.data.referrer;
						newURL = $location.search(url);
					}
					spAriaFocusManager.navigateToLink(newURL.url());
				}
	}
	
	function displayNativeButtons() {
			if (c.isNative) {
					if (typeof cabrillo.viewLayout.getTitle == 'function') {
						cabrillo.viewLayout.getTitle().then(function(title) {
							c.oldTitle = title;
							cabrillo.viewLayout.setTitle($scope.checkoutPopupTitle);
						});
					}
					var buttons = [
						{
							title: $scope.m.dialogCancel,
							enabled: true,
							backgroundColor: '#f7f7f7',
							textColor: '#000000'
						},
						{
							title: $scope.checkOutMsg,
							enabled: true,
							backgroundColor:  $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
							textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF'
						}
					];
					cabrillo.viewLayout.hideBackButton();
					cabrillo.viewLayout.setNavigationBarButtons();
					cabrillo.viewLayout.setBottomButtons(buttons, function(buttonIndex) {
						if (buttonIndex == 0) {
							c.cancel();
						}
						else {
							c.triggerCheckout();
						}
					});
				}
	}
	
	function putCheckingOutBtn() {
			if (c.isNative) {
					var buttons = [
										{
												title: $scope.m.dialogCancel,
												enabled: false,
											  backgroundColor: '#f7f7f7',
												textColor: '#000000'
										},
										{
												title: $scope.m.checkingOutMsg,
												enabled: false,
												backgroundColor:  $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
												textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF'
										}
								];

			  cabrillo.viewLayout.setBottomButtons(buttons, function(buttonIndex) {});
			}
	}

	c.updateDetails();
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.attachment-list {
  	max-height: 180px;
  	overflow-y: scroll;
  	margin-bottom: 10px;
}

.accordion-toggle {
  	line-height: 13px;
}

textarea {
	resize: vertical;
}

.select2-additional-display-field {
  	padding-right: 5px;
}

.full-height {
  	height: -webkit-fill-available;
}

.attachment-height {
 		 height: 80px;
}

.flex-center {
  	display: flex;
  	justify-content: center;
  	align-items: center;
}

.select2-choice{
  .select2-arrow {
    right: 0px !important;
  }
}

.checkout-modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.attachment-text {
	color: $primary;
}

.sc-section-toggle-button {
	outline: none;
	background: none;
	border: none;
	padding: 0 0 .5rem 0;
	&amp;:focus {
	  border: 0.1rem solid $btn-primary-bg;
		box-shadow: 0rem 0rem 0.5rem $btn-primary-bg;
	}
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>catalog_checkout_test</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment")[0];
			if (inboxArray)
				inboxArray.focus();
		}, 100);
	}
	scope.setFocusToAttachmentButton = function () {
		elem.find('.sp-attachment-add')[0].focus();
	}
	scope.focusElement = function (selector) {
		scope.$evalAsync(function () {
			var targetElement = elem.find(selector)[0];
			if (targetElement)
				targetElement.focus();
		});
	}
	scope.$watch('c.showDeliveryAddr', function (newValue) {
		if (newValue)
			scope.focusElement('#deliver-to');
	});
	scope.$watch('c.showSpecialInstructions', function (newValue) {
		if (newValue)
			scope.focusElement('#special-instructions');
	});
}
	]]></link>
        <name>Catalog Checkout test</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	var localInput = input; //to safeguard pullution of "input" via BR or other scripts
	var engagementChannelOptions = {  //extracting here to safeguard pollution of 'options' via other scripts
		native_mobile : options.native_mobile,
		isServiceWorkspace : options.isServiceWorkspace
	};
	data.engagement_channel = new global.GlobalServiceCatalogUtil().getEngagementChannel(engagementChannelOptions);
	data.referrer = options.referrer;
	data.action = options.action;
	if (data.action)
		data.item = options.item;
	else
		data.action = 'checkout';
	
	if (localInput && localInput.action == "from_attachment")
		return;
	else if (localInput && localInput.action === 'log_request') {
		$sp.logStat('Order Now Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
		$sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
		return ;
	}

	var cartName = '';
	if (localInput)
		cartName = localInput.cart.name;
	else if (options.cart)
		cartName = options.cart.name;
	
	addInstrumentationData();
	
	var m = data.msgs = {};
	m.dialogTitle = gs.getMessage("Delete Attachment");
	m.dialogMessage = gs.getMessage("Are you sure?");
	m.dialogOK = gs.getMessage("OK");
	m.dialogCancel = gs.getMessage("Cancel");
	m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
	m.delete_attachment = gs.getMessage("Delete Attachment?");
	m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");
	m.checkingOutMsg = gs.getMessage("Submitting...");
	if (data.item.request_method == "request") {
		m.checkOutMsg = gs.getMessage("Request");
		m.checkoutPopupTitle = gs.getMessage("Request Confirmation");
	} else {
		m.checkOutMsg = gs.getMessage("Checkout");
		m.checkoutPopupTitle = gs.getMessage("Order Confirmation");
	}
	data.isMEE = options.native_mobile == 'true';
	data.sys_properties = {
		mobileNativeColor: gs.getProperty("glide.sc.mobile.primary_color", "#1f8476"),
		isPolaris: gs.getProperty("glide.ui.polaris.experience", "false")
	};

	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
	
	var cartJS;
	if (data.action !== 'order_now') {
		cartJS = new sn_sc.CartJS(cartName, '' + gs.getUser().getID());
		
		if (localInput && localInput.action === "change_shipping_info") {
			cartJS.setSpecialInstructions(localInput.special_instructions);
			cartJS.setRequestedFor(localInput.requestedFor);
			cartJS.setDeliveryAddress(localInput.deliverTo);
		}
	}
	
	if (localInput && localInput.action == 'order_guide') {
		var guideJS = new sn_sc.OrderGuide('' + cartName);
		cartJS = new sn_sc.CartJS('' + cartName);
		for(var i = 0; i < localInput.item.items.length; i++) {
			guideJS.navigateFromMap(localInput.item.items[i]);
		}
		cartJS.activateGuide();
		cartJS.setRequestedFor(localInput.requested_for);
		cartJS.setDeliveryAddress(localInput.delivery_address);
		cartJS.setSpecialInstructions(localInput.special_instructions);
		cartJS.setParentParams(localInput.parentParams);
		cartJS.setEngagementChannel(localInput.engagement_channel);
		cartJS.setReferrer(localInput.referrer);
		var request = cartJS.checkoutGuide();
		data.result = {sys_id: request.request_id, number: request.request_number || request.number, table: request.table || 'sc_request'};
		var portalId = $sp.getPortalRecord().getUniqueValue();
		$sp.logStat('Order Now Request', localInput.item.sys_class_name, localInput.item.sys_id, localInput.item.name, portalId);
		$sp.logStat('Cat Item Request', localInput.item.sys_class_name, localInput.item.sys_id, localInput.item.name, portalId);
		return;
	}
	
	if (localInput && localInput.action === 'checkout') {
		cartJS.setEngagementChannel(localInput.engagement_channel);
		checkoutCart(cartJS);
		return;
	}

	if (data.action !== 'order_now')
		data.cart = cartJS.getCartDetails(false);
	else {
		var requested_for = {
			user_id : gs.getUser().getID(),
			user_name: gs.getUser().getDisplayName()
		};

		data.cart = {
			name: cartName,
			sys_id: gs.generateGUID(),
			requested_for: requested_for.user_id,
			requested_for_display_name: requested_for.user_name,
			delivery_address: sn_sc.CartJS.getRequestedForAddress(requested_for.user_id)
		};
	}
	
	if (options && options.parentParams) { //if parent is passed
			data.parentParams = options.parentParams;
	}
	if (options && options.requested_for && options.requested_for.id) { //If Passed via options
			data.cart.requested_for = options.requested_for.id;
			data.cart.requested_for_display_name = options.requested_for.displayValue;
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(options.requested_for.id);
	}

	if (data.request_for) { //if value is changed by user
		var user = GlideUser.getUserByID(data.request_for);
		if (user.exists()) {
			data.cart.requested_for = data.request_for;
			data.cart.requested_for_display_name = user.getDisplayName();
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(data.request_for);
		}
	}

	data.disable_req_for = sn_sc.CartJS.canViewRF();
	data.ignoreTableACL = gs.getProperty("glide.sc.sp.checkout.ignore.table.acl", "false") == "true";
	data.reqForDispColsFromProp = gs.getProperty("glide.sc.request_for.columns");
	data.refAcSearch = JSUtil.notNil(data.reqForDispColsFromProp) ? "true" : (GlideTableDescriptor.get("sys_user").getED().getAttribute("ref_ac_columns_search") == "true") + "";
	setRequestedForCols(data);
	data.reqForQuery = gs.getProperty("glide.sc.request_for.query");
	
})();

function setRequestedForCols(data) {
	var displayCol = GlideTableDescriptor.get("sys_user").getDisplayName();
	data.reqForDispCol = displayCol || "name";
	if (JSUtil.notNil(data.reqForDispColsFromProp)) {
		data.reqForDispCols = data.reqForDispColsFromProp;
		data.reqForDispCols = data.ignoreTableACL ?  data.reqForDispCols + ";" + data.reqForDispCol : data.reqForDispCols.replace(/;/g, ",");
		data.reqForDispCol = "name";
		data.reqForSearchCols = data.ignoreTableACL ? data.reqForDispCols : data.reqForDispCol + "," + data.reqForDispCols;
	}
	else {
		data.reqForSearchCols = data.reqForDispCol;
		var refAcCols = GlideTableDescriptor.get("sys_user").getED().getAttribute("ref_ac_columns");
		if(JSUtil.notNil(refAcCols))
			data.reqForDispCols = data.ignoreTableACL ? refAcCols + ";" +data.reqForDispCol : (refAcCols + "").replace(/;/g, ",");

		if(JSUtil.notNil(data.reqForDispCols) && JSUtil.notNil(data.refAcSearch) && data.refAcSearch == "true")
			data.reqForSearchCols += data.ignoreTableACL ? ";" + data.reqForDispCols : "," + data.reqForDispCols;
	}
}

function checkoutCart(cart) {
		try {
				var cartItemGr = cart.getCartItems();
				data.numberOfCartItems = cartItemGr.getRowCount();
				var requestedCatItems = new global.GlobalServiceCatalogUtil().findCatItemsForSpLogs(cartItemGr);
				var request = cart.checkoutCart(true);
				data.result = {
						sys_id: request.request_id, 
						number: request.request_number, 
						table: 'sc_request',
						universal_request: request.universal_request
				};
				var portalId = $sp.getPortalRecord().getUniqueValue();
				$sp.logStat('Checkout Request', 'sc_request', request.request_id, request.request_number, portalId);
				new global.GlobalServiceCatalogUtil().logRequestedCatItems(requestedCatItems, portalId);
		} catch(e) {
				var catalogExceptionUtils = new CatalogExceptionUtils();
				if(catalogExceptionUtils.isCartException(e))
						gs.addErrorMessage(e.getMessage());
				data.numberOfCartItems = 0;
		}
}

function addInstrumentationData() {
	if (input && input.action == 'change_shipping_info')
		return;
	
	if (data.action == 'order_now') {
		var catSysId = data.item.sys_id;
		var gr = new GlideRecord('sc_cat_item');
		if (gr.get(catSysId))
			data.item.title = gr.getValue('name');
	} else if (input && input.cart && data.action == 'checkout') {
			var cartData = [];
			var _data;
			var cartSysId = input.cart.sys_id;
			var grCart = new GlideRecord('sc_cart_item');
			grCart.query("cart", cartSysId);
			while(grCart.next()){
				_data = {};
				var gr2 = new GlideRecord('sc_cat_item');
				if (gr2.get(grCart.getValue("cat_item"))) {
					_data.sys_id = gr2.getValue('sys_id');
					_data.title = gr2.getValue('name');
					_data.cartID = cartSysId;
					cartData.push(_data);
				}
			}
		data.cartData = cartData;
	}
}

]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-03 07:38:03</sys_created_on>
        <sys_id>0d8c775b8314929072e2c396feaad320</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Catalog Checkout test</sys_name>
        <sys_package display_value="tst_2405" source="x_846092_tst_2405">35f70138c34a02100515d71d050131eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="tst_2405">35f70138c34a02100515d71d050131eb</sys_scope>
        <sys_update_name>sp_widget_0d8c775b8314929072e2c396feaad320</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-03 07:38:03</sys_updated_on>
        <template><![CDATA[<div id="sc_cat_checkout" ng-class="{'panel panel-default': !c.isNative}" sn-atf-blacklist="IS_SERVICE_CATALOG" ng-keydown="c.onKeyDown($event)">
	<div class="padder-md checkout-modal-header text-base" ng-if="!c.isNative">
		<h1 class="h3">
			{{::checkoutPopupTitle}}
		</h1>
		<i class="fa fa-close pull-right" autofocus="true" tabindex="0" ng-click="c.cancel()" data-toggle="tooltip" data-original-title="${Close modal}" aria-label="${Close modal}"></i>
	</div>
	<div class="wrapper-md clearfix b-t">
		<div class="form-group">
			<div class="row">
				<div class="col-sm-8" ng-class="{'m-t-xl': c.isNative}">
					<label for="requested-for" ng-class="{'m-l': c.isNative}">${Request For}
          </label>
          <i ng-if="!c.isNative" class="fa fa-info-circle" tabindex="0" data-toggle="tooltip" data-original-title="${Request for yourself or on behalf of another person}" data-placement="right" aria-label="${Request for yourself or on behalf of another person}" role="tooltip"></i>
					<sn-record-picker ng-if="!c.data.ignoreTableACL" id="requested-for"
                            field="c.requestedFor"
                            table="'sys_user'" 
                            display-field="c.data.reqForDispCol" 
                            display-fields="c.data.reqForDispCols" 
                            value-field="'sys_id'" 
                            search-fields="c.data.reqForSearchCols"
                            default-query="c.data.reqForQuery"
                            page-size="100"
                            options="{allowClear : false}"
                            sn-disabled="!c.data.disable_req_for">
					</sn-record-picker>
          <sp-reference-element ng-if="c.data.ignoreTableACL"
          	sn-select-width="100%" 
            field="c.requestedFor"
            glide-form="c.requestedFor.g_form"
            display-column="c.data.reqForDispCol"
            allow-clear="false"
            sn-options="{multiple: false, allowClear: false}"
            sn-disabled="!c.data.disable_req_for">
          </sp-reference-element>
				</div>
        <div class="padder-v col-sm-12" ng-if="c.allowDeliveryAddress()" ng-class="{'m-t-xl': c.isNative}">
          <button ng-if="!c.isNative" class="sc-section-toggle-button" aria-controls="deliver-to" ng-click="c.showDeliveryAddr = !c.showDeliveryAddr" aria-expanded="{{c.showDeliveryAddr}}">
			  ${Delivery Information} <span class="text-muted"> ${(Optional)}</span>
			  <i ng-if="::!c.isNative" ng-class="c.showDeliveryAddr ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'"  class="m-t-xs pull-left accordion-toggle"></i>
          </button>
          <label for="deliver-to" ng-if="c.isNative" tabindex="0" class="m-l" aria-label="${Delivery Information Optional}" role="text">${Delivery Information} <span aria-hidden="true" class="text-muted"> ${(Optional)}</span>
          </label>
          <textarea class="form-control" ng-if="c.isNative || c.showDeliveryAddr" 
                    ng-model="c.deliverTo"  id="deliver-to" ng-model-options="{ updateOn: 'blur' }" 
                    ng-change="c.changeShippingInfo()" rows="3" aria-label="${Enter delivery information}"></textarea>
        </div>
        <div class="col-sm-12" ng-class="{'padder-v': !c.allowDeliveryAddress()}" ng-class="{'m-t-xl': c.isNative}">
		  <button ng-if="!c.isNative" class="sc-section-toggle-button" aria-controls="deliver-to" ng-click="c.showSpecialInstructions = !c.showSpecialInstructions" aria-expanded="{{c.showSpecialInstructions}}">
			  ${Special Instructions}  <span class="text-muted"> ${(Optional)}</span>
			  <i ng-if="::!c.isNative" ng-class="c.showSpecialInstructions ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'"  class="m-t-xs pull-left accordion-toggle"></i>
		  </button>
          <label for="special-instructions" ng-if="c.isNative" tabindex="0" aria-label="${Special Instructions Optional}" role="text" class="m-l">${Special Instructions}  <span aria-hidden="true" class="text-muted"> ${(Optional)}</span>
          </label>
          <textarea class="form-control" ng-if="c.isNative || c.showSpecialInstructions" 
                    ng-model="c.special_instructions" id="special-instructions" aria-label="${Enter Special Instructions}"
                    ng-model-options="{ updateOn: 'blur' }" ng-change="c.changeShippingInfo()" rows="3"></textarea>
        </div>
		</div>
    </div>
	</div>
  <div ng-if="c.isNative">
  	<div class="attachment-list" ng-if="c.data.action !== 'order_now'">
			<now-attachments-list template="sp_attachment_single_line" class="padder-b"></now-attachments-list>
    </div>
		<div ng-class="{'flex-center attachment-height': c.isNative}">
				<label ng-if="c.data.action !== 'order_now'" style="font-weight:normal;cursor:pointer;" class="padding-top-s">
					<span class="attachment-text" style="padding-left:28px;">${Add attachments}</span>
          <sp-attachment-button></sp-attachment-button>
				</label>
  	</div>
  </div>
	<div class="panel-footer clearfix" ng-if="!c.isNative">
    <div class="attachment-list" ng-if="c.data.action !== 'order_now'">
			<now-attachments-list template="sp_attachment_single_line" class="padder-b"></now-attachments-list>
    </div>
		<div>
				<label ng-if="c.data.action !== 'order_now'" style="font-weight:normal;cursor:pointer;" class="padding-top-s">
					<sp-attachment-button modal="true"></sp-attachment-button>
					<span style="padding-left:4px;">${Add attachments}</span>
				</label>
			<div class="pull-right">
				<button name="cancel" ng-disabled="c.checkoutInProgress" ng-click="c.cancel()" class="btn btn-default">${Cancel}</button>
				<button ng-disabled="c.checkoutInProgress || !c.requestedFor.value" name="submit" ng-click="c.triggerCheckout()" sn-focus="true" class="btn sc-btn btn-primary m-l-xs">
					<span ng-show="!c.checkoutInProgress">{{::checkOutMsg}}</span>
					<span ng-show="c.checkoutInProgress">{{::m.checkingOutMsg}}</span>
				</button>
			</div>
		</div>
	</div>
</div>]]></template>
    </sp_widget>
</record_update>
